---
- name: Add Icinga repository key.
  apt_key: url=https://packages.icinga.com/icinga.key

- name: Add Icinga repository.
  apt_repository: repo="deb https://packages.icinga.com/{{ ansible_distribution|lower }} icinga-{{ ansible_distribution_release }} main" 

- name: Installing Icinga packages.
  apt:
    pkg:
      - icinga2
      - monitoring-plugins
    state: latest

- name: Recursively change ownership of /etc/icinga2 after installation
  file:
    path: /etc/icinga2
    state: directory
    recurse: yes
    owner: nagios
    group: nagios

- name: Enable Icinga api feature.
  icinga2_feature: name=api

- name: Ensure 'certs' directory exists.
  file: path={{ icinga_client_certs_path }} state=directory owner=nagios group=nagios 
  notify:
    - restart icinga2

- name: Register Icinga client host.
  uri:
    body_format: json
    headers:
      Accept: application/json
    body: "{{ icinga_client_host_object }}"
    method: POST
    url: "{{ icinga_director_url }}/host"
    user: "{{ icinga_director_user }}"
    password: "{{ icinga_director_pass }}"
    status_code: 201,422,500
  when: icinga_register_client

- name: Trigger Icinga Director to deploy config.
  uri:
    body_format: json
    headers:
      Accept: application/json
    method: POST
    url: "{{ icinga_director_url }}/config/deploy"
    user: "{{ icinga_director_user }}"
    password: "{{ icinga_director_pass }}"
  when: icinga_deploy_config

- name: Get Icinga client ticket.
  uri:
    headers:
      Accept: application/json
    url: "{{ icinga_director_url }}/host/ticket?name={{ icinga_client_fqdn }}"
    user: "{{ icinga_director_user }}"
    password: "{{ icinga_director_pass }}"
    return_content: yes
  register: icinga_client_ticket
  notify:
    - restart icinga2

- name: Check key existance
  stat:
    path: "{{ icinga_client_certs_path ~ icinga_client_fqdn }}.key"
  register: key_exists

- name: Generate Icinga client certs.
  command: "icinga2 pki new-cert --cn {{ icinga_client_fqdn }} --key {{ icinga_client_certs_path ~ icinga_client_fqdn }}.key --cert {{ icinga_client_certs_path ~ icinga_client_fqdn }}.crt"
  notify:
    - restart icinga2
  when: not key_exists.stat.exists

- name: Check master crt existance
  stat:
    path: "{{ icinga_client_certs_path }}trusted-master.crt"
  register: master_crt_exists

- name: Get master trusted cert.
  command: "icinga2 pki save-cert --key {{ icinga_client_certs_path ~ icinga_client_fqdn }}.key --cert {{ icinga_client_certs_path ~ icinga_client_fqdn }}.crt --trustedcert {{ icinga_client_certs_path }}trusted-master.crt --host {{ icinga_master_fqdn }}"
  notify:
    - restart icinga2
  when: not master_crt_exists.stat.exists

- name: Check ca existance
  stat:
    path: "{{ icinga_client_certs_path }}ca.crt"
  register: ca_exists

- name: Setup Icinga client node.
  command: "icinga2 node setup --ticket {{ icinga_client_ticket.json }} --cn {{ icinga_client_fqdn }} --endpoint {{ icinga_master_endpoint }} --zone {{ icinga_client_fqdn }} --parent_host {{ icinga_master_fqdn }} --trustedcert {{ icinga_client_certs_path }}trusted-master.crt --accept-commands --accept-config"
  notify:
    - restart icinga2
  when: not ca_exists.stat.exists

- name: Ensure default 'conf.d' directory is not used.
  lineinfile: 
    path: /etc/icinga2/icinga2.conf
    regexp: 'include_recursive.*conf\.d'
    line: '//include_recursive "conf.d"'

# Custom checks tasks
- import_tasks: checks.yml

- name: ensure icinga2 is running
  service:
    name: icinga2
    state: started
